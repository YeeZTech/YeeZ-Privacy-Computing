
enclave {
  include "sgx_eid.h"
  include "ypc/stbox/tsgx/channel/dh_cdef.h"
  from "sgx_tstdc.edl" import *;
  from "yaenclave.edl" import *;
  from "stbox.edl" import *;

  trusted {
    public uint32_t begin_parse_data_item();
    public uint32_t parse_data_item([in, size=len]const uint8_t * sealed_data, uint32_t len);
    public uint32_t end_parse_data_item();

    public uint32_t get_enclave_hash_size();
    public uint32_t get_enclave_hash([out, size=hash_size] uint8_t * hash, uint32_t hash_size);

    public uint32_t get_analyze_result_size();
    public uint32_t get_analyze_result([out, size=res_size] uint8_t * analyze_result, uint32_t res_size);

    public uint32_t init_data_source([in, size=data_size] const uint8_t * data_source_info, uint32_t data_size);

    public uint32_t init_model([in, size=data_size] const uint8_t *model, uint32_t data_size);

    public uint32_t get_parser_type();


    /*public uint32_t add_block_parse_result(uint16_t block_index,*/
    /*[in, size=res_size] uint8_t * block_result, uint32_t res_size, [in, size=hash_size] uint8_t *data_hash,*/
                                          /*uint32_t hash_size, [in, size=sig_size] uint8_t *sig,*/
                                          /*uint32_t sig_size);*/
    /*public uint32_t merge_parse_result([in, size=len] uint8_t * encrypted_param, uint32_t len);*/
    /*public uint32_t need_continue();*/

    /*public uint32_t set_extra_data([in, size=in_size] uint8_t * extra_data, uint32_t in_size);*/
  };


  untrusted {
    /* define OCALLs here. */
    uint32_t next_data_batch([in, size=hash_size] const uint8_t * data_hash, uint32_t hash_size,
                             [out] uint8_t ** data, [out] uint32_t *len);
    
    void free_data_batch([user_check] uint8_t *data);

    uint32_t download_oram_params_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size, 
                                        [out] uint32_t *block_num, [out] uint32_t *bucket_num_N, 
                                        [out]uint8_t *level_num_L, [out] uint32_t *bucket_str_size, 
                                        [out] uint32_t *batch_str_size);
    uint32_t get_block_id_OCALL([in, size=hash_size] const uint8_t * data_hash, uint32_t hash_size,
                                [out] uint32_t *block_id,
                                [in, size=hash_size] const uint8_t *param_hash, uint32_t param_hash_size);
    uint32_t download_position_map_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size, 
                                          [out] uint8_t ** position_map, [out] uint32_t *len);
    uint32_t update_position_map_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size, 
                                       [in, size = len] uint8_t * position_map, uint32_t len);
    uint32_t download_path_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size, 
                                  uint32_t leaf, [out] uint8_t ** encrpypted_path, [out] uint32_t *len);
    uint32_t download_stash_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size, 
                                  [out] uint8_t ** stash, [out] uint32_t *len);
    uint32_t update_stash_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size,
                                [in, size = len] uint8_t * stash, uint32_t len);
    uint32_t upload_path_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size,
                               uint32_t leaf, [in, size = len] uint8_t * encrpypted_path, uint32_t len);
    uint32_t download_merkle_hash_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size,
                                        uint32_t leaf, [out] uint8_t ** merkle_hash, [out] uint32_t *len);
    uint32_t update_merkle_hash_OCALL([in, size=hash_size] const uint8_t *data_hash, uint32_t hash_size,
                                      uint32_t leaf, [in, size = len] uint8_t * merkle_hash, uint32_t len);
  };
};
