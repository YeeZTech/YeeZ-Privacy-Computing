
enclave  {
    include "sgx_eid.h"
    from "stbox.edl" import *;

    trusted{

      //These are for outside usage
      public uint64_t stbox_ecc_version();
    public uint32_t generate_secp256k1_key_pair([out, size=pkey_size] uint8_t * pub_key, uint32_t  pkey_size,
                                                [out, size=sealed_size] uint8_t * sealed_priv_key, uint32_t sealed_size);

    public uint32_t generate_secp256k1_pkey_from_sealed_skey([in, size=sealed_size] uint8_t *sealed_key,
                                                             uint32_t sealed_size,
                                                             [out, size=pkey_size] uint8_t *pkey,
                                                             uint32_t pkey_size);

    public uint32_t get_secp256k1_public_key_size();
    public uint32_t get_secp256k1_sealed_private_key_size();

    public uint32_t get_secp256k1_signature_size();
    public uint32_t sign_message([in, size=sealed_size] uint8_t * sealed_private_key, uint32_t sealed_size,
                                 [in, size=data_size] uint8_t * data, uint32_t data_size,
                                 [out, size=sig_size] uint8_t * sig, uint32_t sig_size);
    public uint32_t verify_signature([in, size=data_size] uint8_t * data, uint32_t data_size,
                                     [in, size=sig_size] uint8_t * sig, uint32_t sig_size,
                                     [in, size=pkey_size] uint8_t * public_key, uint32_t pkey_size);

    public uint32_t get_encrypted_message_size(uint32_t data_size);
    public uint32_t encrypt_message([in, size=pkey_size] uint8_t * public_key, uint32_t pkey_size,
                                    [in, size=data_size] uint8_t * data, uint32_t data_size,
                                    [out, size=cipher_size] uint8_t * cipher, uint32_t cipher_size);

    public uint32_t get_decrypted_message_size(uint32_t cipher_size);
    public uint32_t decrypt_message([in, size=sealed_size] uint8_t * sealed_private_key, uint32_t sealed_size,
                                    [in, size=cipher_size] uint8_t * cipher, uint32_t cipher_size,
                                    [out, size=data_size] uint8_t * data, uint32_t data_size);
    };

    untrusted{
    };
};
